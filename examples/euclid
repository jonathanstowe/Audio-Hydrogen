#!perl6

use v6;


# From BjÃ¶rklund via http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf

class Euclid
{
   method build_string(Int $level, @count, @remainder )
   { 
      my @bitmap;
   
      if ($level == -1) 
      {
         @bitmap.append: 0;
      }
      elsif ( $level == -2 )
      {
         @bitmap.append: 1;
      }
      else
      {
         for 0 .. @count[$level] - 1 
         {
            @bitmap.append: self.build_string($level-1, @count, @remainder); 
         }
         if (@remainder[$level] != 0) 
         {     
            @bitmap.append: self.build_string($level-2, @count, @remainder); 
         }
      }
   
      flat @bitmap;
   }
   
   
   method compute_bitmap(Int $num_slots, Int $num_pulses)
   { 
   
      my @count;
      my @remainder;

      my $divisor = $num_slots - $num_pulses; 
   
      @remainder[0] = $num_pulses; 
   
      my $level = 0; 
   
      while (@remainder[$level] > 1 )
      { 
         @count[$level] = $divisor / @remainder[$level]; 
         @remainder[$level+1] = $divisor % @remainder[$level]; 
         $divisor = @remainder[$level]; 
         $level++;
      }
   
      @count[$level] = $divisor; 
      my @bits = self.build_string($level, @count, @remainder); 
      while (@bits[0] == 0)
      {
         @bits = @bits.rotate(1);
      }
   
      flat @bits;
   } 
}

use Audio::Hydrogen;
use Audio::Hydrogen::Song;

multi MAIN(Bool :$list-drumkits!) {
    for Audio::Hydrogen.new.drumkits -> $dk {
        say $dk.name;
    }
}

multi MAIN(Str :$kit!, Bool :$list-instruments!) {
    my $hydrogen = Audio::Hydrogen.new;
    if $hydrogen.drumkits.grep({ $_.name eq $kit }).first -> $di {
        for $di.drumkit.instruments -> $instrument {
            if $instrument.name {
                say sprintf "%3i : %s", $instrument.id, $instrument.name ;
            }
        }

    }
    else {
        say "Can't find drumkit $kit";
        exit;
    }
}

multi MAIN(Str :$kit!, Int:D :$slots!, Int:D :$bars = 1, Int:D :$fills) {
    my $dk;
    my $hydrogen = Audio::Hydrogen.new;

    if $hydrogen.drumkits.grep({ $_.name eq $kit }).first -> $di {
        my $drumkit = $di.drumkit();
        my $slot-pos = (192 * $bars) / $slots;
        my @fills = Euclid.new.compute_bitmap($slots, $fills);
        my $pattern = Audio::Hydrogen::Pattern.new(name => "Pattern 1", size => ($bars * 192));
        my $pos = 0;
        my $instrument = 1;

        for @fills -> $fill {
            if $fill {
                my $position = Int($pos * $slot-pos);
                my $note = Audio::Hydrogen::Pattern::Note.new(:$position, :$instrument);
                $pattern.note-list.append($note);
            }
            $pos++;
        }

        my $song = Audio::Hydrogen::Song.new(instruments => $drumkit.instruments);
        $song.patterns.append($pattern);
        say $song.to-xml;
    }
    else {
        say "Can't find drumkit $kit";
        exit;
    }
}
